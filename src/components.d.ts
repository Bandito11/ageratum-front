/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */

import '@stencil/core';

declare global {
  namespace JSX {
    interface Element {}
    export interface IntrinsicElements {}
  }
  namespace JSXElements {}

  interface HTMLElement {
    componentOnReady?: () => Promise<this | null>;
  }

  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;

    forceUpdate(): void;
  }

  interface HTMLAttributes {}
}

import '@stencil/router';
import '@stencil/state-tunnel';

import {
  MatchResults,
} from '@stencil/router';

declare global {

  namespace StencilComponents {
    interface BlogCode {
      'caption': string;
      'code': string;
      'language': string;
    }
  }

  interface HTMLBlogCodeElement extends StencilComponents.BlogCode, HTMLStencilElement {}

  var HTMLBlogCodeElement: {
    prototype: HTMLBlogCodeElement;
    new (): HTMLBlogCodeElement;
  };
  interface HTMLElementTagNameMap {
    'blog-code': HTMLBlogCodeElement;
  }
  interface ElementTagNameMap {
    'blog-code': HTMLBlogCodeElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'blog-code': JSXElements.BlogCodeAttributes;
    }
  }
  namespace JSXElements {
    export interface BlogCodeAttributes extends HTMLAttributes {
      'caption'?: string;
      'code'?: string;
      'language'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface BlogContents {
      'contents': string;
    }
  }

  interface HTMLBlogContentsElement extends StencilComponents.BlogContents, HTMLStencilElement {}

  var HTMLBlogContentsElement: {
    prototype: HTMLBlogContentsElement;
    new (): HTMLBlogContentsElement;
  };
  interface HTMLElementTagNameMap {
    'blog-contents': HTMLBlogContentsElement;
  }
  interface ElementTagNameMap {
    'blog-contents': HTMLBlogContentsElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'blog-contents': JSXElements.BlogContentsAttributes;
    }
  }
  namespace JSXElements {
    export interface BlogContentsAttributes extends HTMLAttributes {
      'contents'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface BlogEntry {

    }
  }

  interface HTMLBlogEntryElement extends StencilComponents.BlogEntry, HTMLStencilElement {}

  var HTMLBlogEntryElement: {
    prototype: HTMLBlogEntryElement;
    new (): HTMLBlogEntryElement;
  };
  interface HTMLElementTagNameMap {
    'blog-entry': HTMLBlogEntryElement;
  }
  interface ElementTagNameMap {
    'blog-entry': HTMLBlogEntryElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'blog-entry': JSXElements.BlogEntryAttributes;
    }
  }
  namespace JSXElements {
    export interface BlogEntryAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface BlogFigure {
      'alt': string;
      'caption': string;
      'href': string;
      'src': string;
    }
  }

  interface HTMLBlogFigureElement extends StencilComponents.BlogFigure, HTMLStencilElement {}

  var HTMLBlogFigureElement: {
    prototype: HTMLBlogFigureElement;
    new (): HTMLBlogFigureElement;
  };
  interface HTMLElementTagNameMap {
    'blog-figure': HTMLBlogFigureElement;
  }
  interface ElementTagNameMap {
    'blog-figure': HTMLBlogFigureElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'blog-figure': JSXElements.BlogFigureAttributes;
    }
  }
  namespace JSXElements {
    export interface BlogFigureAttributes extends HTMLAttributes {
      'alt'?: string;
      'caption'?: string;
      'href'?: string;
      'src'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface BlogPage {
      'match': MatchResults;
    }
  }

  interface HTMLBlogPageElement extends StencilComponents.BlogPage, HTMLStencilElement {}

  var HTMLBlogPageElement: {
    prototype: HTMLBlogPageElement;
    new (): HTMLBlogPageElement;
  };
  interface HTMLElementTagNameMap {
    'blog-page': HTMLBlogPageElement;
  }
  interface ElementTagNameMap {
    'blog-page': HTMLBlogPageElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'blog-page': JSXElements.BlogPageAttributes;
    }
  }
  namespace JSXElements {
    export interface BlogPageAttributes extends HTMLAttributes {
      'match'?: MatchResults;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface BlogRoot {

    }
  }

  interface HTMLBlogRootElement extends StencilComponents.BlogRoot, HTMLStencilElement {}

  var HTMLBlogRootElement: {
    prototype: HTMLBlogRootElement;
    new (): HTMLBlogRootElement;
  };
  interface HTMLElementTagNameMap {
    'blog-root': HTMLBlogRootElement;
  }
  interface ElementTagNameMap {
    'blog-root': HTMLBlogRootElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'blog-root': JSXElements.BlogRootAttributes;
    }
  }
  namespace JSXElements {
    export interface BlogRootAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface DisqusCommentCount {
      'config': any;
      'shortname': any;
    }
  }

  interface HTMLDisqusCommentCountElement extends StencilComponents.DisqusCommentCount, HTMLStencilElement {}

  var HTMLDisqusCommentCountElement: {
    prototype: HTMLDisqusCommentCountElement;
    new (): HTMLDisqusCommentCountElement;
  };
  interface HTMLElementTagNameMap {
    'disqus-comment-count': HTMLDisqusCommentCountElement;
  }
  interface ElementTagNameMap {
    'disqus-comment-count': HTMLDisqusCommentCountElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'disqus-comment-count': JSXElements.DisqusCommentCountAttributes;
    }
  }
  namespace JSXElements {
    export interface DisqusCommentCountAttributes extends HTMLAttributes {
      'config'?: any;
      'shortname'?: any;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface DisqusCommentEmbed {
      'commentId': any;
      'height': any;
      'showMedia': any;
      'showParentComment': any;
      'width': any;
    }
  }

  interface HTMLDisqusCommentEmbedElement extends StencilComponents.DisqusCommentEmbed, HTMLStencilElement {}

  var HTMLDisqusCommentEmbedElement: {
    prototype: HTMLDisqusCommentEmbedElement;
    new (): HTMLDisqusCommentEmbedElement;
  };
  interface HTMLElementTagNameMap {
    'disqus-comment-embed': HTMLDisqusCommentEmbedElement;
  }
  interface ElementTagNameMap {
    'disqus-comment-embed': HTMLDisqusCommentEmbedElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'disqus-comment-embed': JSXElements.DisqusCommentEmbedAttributes;
    }
  }
  namespace JSXElements {
    export interface DisqusCommentEmbedAttributes extends HTMLAttributes {
      'commentId'?: any;
      'height'?: any;
      'showMedia'?: any;
      'showParentComment'?: any;
      'width'?: any;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface DisqusDiscussionEmbed {
      'config': any;
      'disqus_shortname': any;
      'shortname': any;
    }
  }

  interface HTMLDisqusDiscussionEmbedElement extends StencilComponents.DisqusDiscussionEmbed, HTMLStencilElement {}

  var HTMLDisqusDiscussionEmbedElement: {
    prototype: HTMLDisqusDiscussionEmbedElement;
    new (): HTMLDisqusDiscussionEmbedElement;
  };
  interface HTMLElementTagNameMap {
    'disqus-discussion-embed': HTMLDisqusDiscussionEmbedElement;
  }
  interface ElementTagNameMap {
    'disqus-discussion-embed': HTMLDisqusDiscussionEmbedElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'disqus-discussion-embed': JSXElements.DisqusDiscussionEmbedAttributes;
    }
  }
  namespace JSXElements {
    export interface DisqusDiscussionEmbedAttributes extends HTMLAttributes {
      'config'?: any;
      'disqus_shortname'?: any;
      'shortname'?: any;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface TableOfContents {

    }
  }

  interface HTMLTableOfContentsElement extends StencilComponents.TableOfContents, HTMLStencilElement {}

  var HTMLTableOfContentsElement: {
    prototype: HTMLTableOfContentsElement;
    new (): HTMLTableOfContentsElement;
  };
  interface HTMLElementTagNameMap {
    'table-of-contents': HTMLTableOfContentsElement;
  }
  interface ElementTagNameMap {
    'table-of-contents': HTMLTableOfContentsElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'table-of-contents': JSXElements.TableOfContentsAttributes;
    }
  }
  namespace JSXElements {
    export interface TableOfContentsAttributes extends HTMLAttributes {

    }
  }
}

declare global { namespace JSX { interface StencilJSX {} } }
